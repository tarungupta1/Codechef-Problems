Problem Name: Chef Up
Problem Tag: CHEF7UP
Link: https://www.codechef.com/problems/CHEF7UP

Question
Chef is a wanted criminal, and N police officers are up for catching him. The officers want to catch Chef no matter the cost, and Chef also wants to eliminate as many 
officers as possible (preferably everyone) before getting caught (or before running away after eliminating everyone). Neither the officers nor Chef will run away before 
accomplishing their goals.
Chef and the officers are on a one-dimensional grid with coordinates ranging from −1010 to 1010. Chef is initially standing at coordinate C, and the i-th officer is initially 
at coordinate Pi. The officers and Chef then take turns to move, with the officer team moving first.
During their turn, officers will have to move to an adjacent unoccupied cell one by one, in any order they want. Every officer will have to move. At every moment of time, no 
wo officers can be in the same cell, and also no officer can be in the same cell as Chef. If the officer is unable to move to an adjacent unoccupied cell, he is eliminated 
(and the cell he was in becomes unoccupied). Note that the officer team will try to move to eliminate as few officers as possible. For example, with P=[2,3,4] and C=6, then 
the next positions of the officers can be [1,2,3], [1,2,5], [1,4,5], or [3,4,5]. However, with P=[2,3,4] and C=5, the only possible set of the next positions of the officers 
is [1,2,3].
After the officer team's turn, Chef also moves to an adjacent unoccupied cell, or gets caught if he cannot find any adjacent unoccupied cell. The process then repeats until 
either Chef is caught, or all officers are eliminated and Chef runs away.
You need to find out the maximum number of officers that can be eliminated by Chef, and if Chef can run away or not.
As a reminder, two cells with coordinates X and Y are adjacent if and only if |X−Y|=1.


Editorial Link: https://discuss.codechef.com/t/chef7up-editorial/95739
Video Link: https://www.youtube.com/watch?v=g_aSGMtkM1k


Time Complexity: O(N.log(N)) for each test case
Space Complexity: O(N) for each test case

Solution
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(void){
    ios_base::sync_with_stdio(0);
    cin.tie(0);     cout.tie(0);
    int t;  cin>>t;
    while(t--){
        int n, c;   cin>>n>>c;
        
        vector<int> p(n);
        for(int i=0; i<n; i++){
            cin>>p[i];
        }
        
        // sorting all the positions of police officers
        sort(p.begin(), p.end());
        
        
        int l = 0;  // stores the number of police officers which will be safe on left side of chef
        // traversing all police officers which are on the left side of chef
        for(int i=0; i<n; i++){
            if(p[i] < c){
                // checking the parity of chef position and police officer's position. if same parity, then all officer before this officer will be safe irrespective 
                // of their parity
                if((c & 1) == (p[i] & 1)){
                    l = i+1;
                }
            }
            else{
                break;
            }
        }
        
        
        int r = 0;  // stores the number of police officers which will be safe on right side of chef
        // traversing all police officers which are on the left side of chef
        for(int i=n-1; i>=0; i--){
            if(c < p[i]){
                // checking the parity of chef position and police officer's position. if same parity, then all officer after this officer will be safe irrespective 
                // of their parity
                if((c & 1) == (p[i] & 1)){
                    r = n - i;
                }
            }
            else{
                break;
            }
        }
        
        int total_police_officers_safe = l + r;
        int total_police_officers_not_safe = n - total_police_officers_safe;
        cout<<total_police_officers_not_safe<<" ";
        
        
        if(total_police_officers_safe == 0){
            cout<<"1\n";
        }
        else{
            cout<<"-1\n";
        }
    }
}
