Problem Name: Integer concatenation
Problem Tag: INTCONCA
Link: https://www.codechef.com/problems/INTCONCA

Question
Concatenation of two integers is obtained as follows: First, convert both integers to strings. Then concatenate both strings into one and convert this concatenated string 
back to integer. For example, concatenation of 6 and 7 is CONC(6,7)=67, concatenation of 123 and 45 is CONC(123,45)=12345. You are given an array A consisting of N 
integers. You are also given two integers L and R. Find the number of pairs (i, j) such that 1≤i,j≤N and L ≤ CONC(Ai,Aj) ≤ R.
Note: Since the size of the input and output is large, please use fast input-output methods.

Editorial Link: https://discuss.codechef.com/t/intconca-editorial/95265
Video Link: https://youtu.be/nktqs_-ykJ0


Time Complexity: O(N.log(N)) for each test case
Space Complexity: O(N) for each test case

Solution
#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define MOD LLONG_MAX

ll mulMod(ll a, ll b){
    ll ans = ((a % MOD) * (b % MOD)) % MOD;
    return ans;
}

ll modPow(ll a, ll b){
    ll ans = 1;
    
    while(b > 0){
        if(b & 1){
            ans = mulMod(ans, a);
        }
        
        b >>= 1;
        a = mulMod(a, a);
    }
    
    return ans;
}

int main() {
	// your code goes here
	ios::sync_with_stdio(false);
	cin.tie(0);     cout.tie(0);
	
	int t;  cin>>t;
	while(t-- > 0){
	    ll n, l, r;  cin>>n>>l>>r;	    
	    std::vector<ll> v(n);
	    for(int i=0; i<n; i++){
	        cin>>v[i];
	    }
	    
	    sort(v.begin(), v.end());
	    
	    ll ans = 0;
	    for(int i=0; i<n; i++){
	        
	        ll len_y = log10(v[i]) + 1;
	        ll d = modPow(10ll, len_y);
	        ll R = (r - v[i]) / d;    // here we will get floor value
	        ll L = (l - v[i] + d - 1ll) / d;   // here we will get ceil value
	        
	        ans += upper_bound(v.begin(), v.end(), R) - lower_bound(v.begin(), v.end(), L);
	    }
	    
	    cout<<ans<<"\n";
	}
	return 0;
}
