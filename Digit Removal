Problem Name: Digit Removal 
Problem Tag: DIGITREM
Link: https://www.codechef.com/problems/DIGITREM

Question
You are given an integer N and a digit D. Find the minimum non-negative integer you should add to N such that the final value of N does not contain the digit D.

Explanation
we will start checking numbers from right to left. if we find the digit, then we have to increement that value, therefore we will find the difference between the the 
next number and the current number and add the difference to the ans. 
For example:
n = 5825, d = 8, so, we can find the diff between 5900 and 5825, which will be 75
n = 1323, d = 3, so, we can find the diff between 1324 and 1323, which will be 1. Then again we find the diff between 1400 and 1324, which will be 76. so Total ans will be 77.
After changing the number we have to start checking again from right to left

Video Link: https://youtu.be/SuPZa-Lmatk


Time Complexity: O(log10(N)) (or number of digits) for each test case
Space Complexity: O(1) for each test case

Solution

#include <bits/stdc++.h>
#include <iostream>
#include <string>
using namespace std;
typedef long long ll;
    
int main(void){
    ios_base::sync_with_stdio(0);
    cin.tie(0);    cout.tie(0);
    int t;  cin>>t;
    while(t--){
        int n, d;   cin>>n>>d;
       
        string str = to_string(n);
        int sum = 0;
        int pow = 1;        
        
        for(int i=str.length()-1; i>=0; i--){
            int num  = str[i] - '0';
            
            if(num == d){
                int num2 = n % pow;
                int rem = pow - num2;
                sum += rem;
                n += rem;
                
                str = to_string(n);
                i = str.length();
                pow = 1;
            }
            else{
                pow *= 10;
            }
        }
        
        cout<<sum<<"\n";        
    }
}
