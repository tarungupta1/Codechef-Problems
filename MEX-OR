Problem Name: MEX-OR 
Problem Tag: MEXOR 
Link: https://www.codechef.com/problems/MEXOR

Question
The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. 
For instance:
The MEX of [2,2,1] is 0, because 0 does not belong to the array.
The MEX of [3,1,0,1] is 2, because 0 and 1 belong to the array, but 2 does not.
The MEX of [0,3,1,2] is 4 because 0,1,2 and 3 belong to the array, but 4 does not.
Find the maximum possible MEX of an array of non-negative integers such that the bitwise OR of the elements in the array does not exceed X.


Time Complexity: O(1) for each test case
Space Complexity: O(1) for each test case

Solution

#include <bits/stdc++.h>
#include <iostream>
using namespace std;
typedef long long ll;

int main(void){
    ios_base::sync_with_stdio(0);
    cin.tie(0);    cout.tie(0);
    int t;  cin>>t;
    while(t--){

        int n;  cin>>n;
        
        if(n == 0){
            cout<<"1\n";
            continue;
        }
        
    /* if the number 'n' is of the form (2^k - 1), then taking OR of all the values from [0 to n] will result in 'n'. So MEX will be 'n+1'.
    
    But when the number is not of the form (2^k - 1), then taking OR of all the values from [0 to n] will result in (2^(k+1)), which will be greater than x. 
    Therefore, we have to take OR of few values only. Through observation we can see that if we take OR of all the values from [0 to (2^(k-1))], where k = number of binary 
    digits of the number 'n', then the MEX we will get will be maximum which is '2^k'. Other permutations will result in OR values greater than x (which we can't take) or 
    values smaller than the actual answer (happens when we skip numbers between [0, n]).
    */
    
        int digit1 = int(log(n)/log(2));
        int digit2 = int(log(n+1)/log(2));
        
        if(digit1 == digit2){
            cout<<(1 << digit1)<<endl;
        }
        else{
            cout<<n+1<<endl;
        }
    }
}     
